"" Plugins will be downloaded under the specified directory.
"call plug#begin('~/.vim/plugged')
"
"" Declare the list of plugins.
"Plug 'plugin/nerdtree'
"Plug 'plugin/airline.vim'
"Plug 'plugin/AlignMapsPlugin.vim'
"Plug 'plugin/AlignPlugin.vim'
"Plug 'plugin/a.vim'
"Plug 'plugin/cecutil.vim'
"Plug 'plugin/cscope_maps.vim'
"Plug 'plugin/DoxygenToolkit.vim'
"Plug 'plugin/mru_bak.vim'
"Plug 'plugin/NERD_commenter.vim'
"Plug 'plugin/nerdtree'
"Plug 'plugin/NERD_tree.vim'
"Plug 'plugin/taglist.vim'
"Plug 'plugin/tcomment.vim'
"
"" List ends here. Plugins become visible to Vim after this call.
"call plug#end()
"let g:plug_url_format='git@git.code.oa.com:%s.git' 

"backspace 修复
set nocompatible
set backspace=indent,eol,start

"系统设置LANG读不出来，不知道为什么，这里手动设置一下
set encoding=utf-8
set fileencodings=utf-8,gbk,ucs_bom,cp936
set number
set nolist
"代码长度提示
"set cc=110

"sh 初始化bashrc
set shell=bash\ --login

if(has("win32") || has("win95") || has("win64") || has("win16")) "判定当前操作系统类型
    let g:iswindows=1
else
    let g:iswindows=0
endif
set nocompatible "不要vim模仿vi模式，建议设置，否则会有很多不兼容的问题
syntax on"打开高亮
syntax enable "
if has("autocmd")
    filetype plugin indent on "根据文件进行缩进
    augroup vimrcEx
        au!
        autocmd FileType text setlocal textwidth=78
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \ exe "normal! g`\"" |
                    \ endif
		autocmd FileType python setlocal et sta sw=4 sts=4
    augroup END
else
    "智能缩进，相应的有cindent，官方说autoindent可以支持各种文件的缩进，但是效果会比只支持C/C++的cindent效果会差一点，但笔者并没有看出来
    set autoindent " always set autoindenting on
	set shiftwidth=4
endif " has("autocmd")
set tabstop=4 "让一个tab等于4个空格
set sta sw=4 sts=4
set expandtab
set vb t_vb=
set nowrap "不自动换行
set hlsearch "高亮显示结果
set incsearch "在输入要搜索的文字时，vim会实时匹配
"set backspace=indent,eol,start whichwrap+=<,>,[,] "允许退格键的使用
set backspace=indent,eol,start  "允许退格键的使用
if(g:iswindows==1) "允许鼠标的使用
    "防止linux终端下无法拷贝
    if has('mouse')
        set mouse=a
    endif
    au GUIEnter * simalt ~x
endif

if &term == "xterm-256color"
  set t_kb=
  fixdel
endif

"if &term == "xterm-256color-xshell"
"  set t_kb=
"  fixdel
"endif

"autocmwitch on/off the paste
function! s:PasteSwitch()
    let s:paste_ = &paste
    if s:paste_ == 1
        exec 'set nopaste'
        exec 'normal a'
        echomsg "set nopaste mode"
    endif
    if s:paste_ == 0
        exec 'set paste'
        exec 'normal a'
        echomsg "set paste mode"
    endif
endfunction

"map <unique><silent><F3> :call <SID>PasteSwitch()<CR>


au BufEnter * lcd %:p:h
"ctags 及 scrope的配置
"将F12映射到tags生成
map <F12> :call Do_CsTag()<CR>
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>
function Do_CsTag()
    let dir = getcwd()
    if filereadable("tags")
        if(g:iswindows==1)
            let tagsdeleted=delete(dir."\\"."tags")
        else
            let tagsdeleted=delete("./"."tags")
        endif
        if(tagsdeleted!=0)
            echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
            return
        endif
    endif
    if has("cscope")
        silent! execute "cs kill -1"
    endif
    if filereadable("cscope.files")
        if(g:iswindows==1)
            let csfilesdeleted=delete(dir."\\"."cscope.files")
        else
            let csfilesdeleted=delete("./"."cscope.files")
        endif
        if(csfilesdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
            return
        endif
    endif
    if filereadable("cscope.out")
        if(g:iswindows==1)
            let csoutdeleted=delete(dir."\\"."cscope.out")
        else
            let csoutdeleted=delete("./"."cscope.out")
        endif
        if(csoutdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
            return
        endif
    endif
    if(executable('ctags'))
        "silent! execute "!ctags -R --c-types=+p --fields=+S *"
        silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        if(g:iswindows!=1)
            silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
        else
            silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs >> cscope.files"
        endif
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
endfunction


"进行Tlist的设置
"TlistUpdate可以更新tags
map <F3> :silent! Tlist<CR> "按下F3就可以调出了
let Tlist_Ctags_Cmd='ctags' "因为我们放在环境变量里，所以可以直接执行
let Tlist_Use_Right_Window=1 "让窗口显示在右边，0的话就是显示在左边
let Tlist_Show_One_File=0 "让taglist可以同时展示多个文件的函数列表，如果想只有1个，设置为1
let Tlist_File_Fold_Auto_Close=1 "非当前文件，函数列表折叠隐藏
let Tlist_Exit_OnlyWindow=1 "当taglist是最后一个分割窗口时，自动推出vim
let Tlist_Process_File_Always=0 "是否一直处理tags.1:处理;0:不处理。不是一直实时更新tags，因为没有必要
let Tlist_Inc_Winwidth=0

".ommncomplete 设置
set nocp
filetype plugin on

"对NERD_commenter的设置
let NERDShutUp=1

"doxygen 设置
map fg : Dox<cr>
let g:DoxygenToolkit_authorName="gavinduan"
let g:DoxygenToolkit_licenseTag="My own license\<enter>"
let g:DoxygenToolkit_undocTag="DOXIGEN_SKIP_BLOCK"
let g:DoxygenToolkit_briefTag_pre = "@brief\t"
let g:DoxygenToolkit_paramTag_pre = "@param\t"
let g:DoxygenToolkit_returnTag = "@return\t"
let g:DoxygenToolkit_briefTag_funcName = "no"
let g:DoxygenToolkit_maxFunctionProtoLines = 30

"对NERDTree设置
map <C-n> :NERDTreeToggle<CR>

"设置换行wrap
set ww="b,s,h,l"

"color scheme
set t_Co=256
set background=dark
colorscheme molokai
"colorscheme ir_black

"multi-window manipulation
"普通模式为窗口跳转
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
"插入模式时为移动鼠标
inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>


"functionlist map
"map <F2> :Flisttoggle<CR>

:nnoremap <F5> "=strftime("%c")<CR>P
:inoremap <F5> <C-R>=strftime("%c")<CR>

"SET Comment START
autocmd BufNewFile **.h,*.cpp exec ":call SetComment()" |normal 10Go

function SetComment()
    if expand("%:e") == 'cpp'
        call setline(1, '///C++ file')
    elseif expand("%:e") == 'h'
        call setline(1, '#pragma once')
    endif
    call append(1, '////***************************************************************')
    call append(2, '///*')
    call append(3, '///* @file          : '.expand("%"))
    call append(4, '///*')
    call append(5, '///* @author        : gavinduan')
    call append(6, '///* @brief         : ---')
    call append(7, '///* @create        : '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(8, '///* @last_modified : '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(9, '///***************************************************************')
    call append(10, '')
endfunction

map <F6> :call SetComment()<CR>:10<CR>o
"SET Comment END

"SET Last Modified Time START
function DataInsert()
    call cursor(9,1)
    if search ('Last Modified') != 0
        let line = line('.')
        call setline(line, '///* @last_modified : '.strftime("%Y-%m-%d %H:%M:%S"))
    endif
endfunction

autocmd FileWritePre,BufWritePre *.cpp,*.h ks|call DataInsert() |'s

"Delete spaces at the end of lines
function DeleteEOLSpaces() range"Delete spaces after
    for linenum in range(a:firstline, a:lastline)
        "Replace the spaces
        let curr_line   = getline(linenum)
        let replacement = substitute(curr_line,' \+$','','g')
        call setline(linenum, replacement)
    endfor

    "Report what was done...
    if a:lastline > a:firstline
        echo "DeleteEOLSpaces" (a:lastline - a:firstline + 1) "lines"
    endif
endfunction

"autocmd FileWritePre,BufWritePre * ks|1,$call DeleteEOLSpaces() |'s

"SET Last Modified Time END

"SET add funciton comment START
function SetFunctionComment()
    call append(1, '////***************************************************************')
    call append(2, '///*')
    call append(3, '///* @file         : '.expand("%"))
    call append(4, '///*')
    call append(5, '///* @author       : gavinduan')
    call append(6, '///* @brief        : ---')
    call append(7, '///* Create        : '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(8, '///* Last Modified : '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(9, '///***************************************************************')
endfunction

map <F4> :call SetFunctionComment()<CR>:10<CR>o
"SET add funciton comment END

"SET add funciton add Doxygen comment
"function SetDoxygenComment()
"    call append(1, '////***************************************************************')
"    call append(2, '///*')
"    call append(3, '///* @file         : '.expand("%"))
"    call append(4, '///*')
"    call append(5, '///* @author       : gavinduan')
"    call append(6, '///* @brief        : ---')
"    call append(7, '///* Create        : '.strftime("%Y-%m-%d %H:%M:%S"))
"    call append(8, '///* Last Modified : '.strftime("%Y-%m-%d %H:%M:%S"))
"    call append(9, '///***************************************************************')
"endfunction

"Align settings
"函数注释对齐
"autocmd VimEnter * :AlignCtrl =lp1P0I @

function! TabPos_ActivateBuffer(num)
    let s:count = a:num
    exe "tabfirst"
    exe "tabnext" s:count
endfunction

function! TabPos_Initialize()
for i in range(1, 9)
        exe "map <C-[>" . i . " :call TabPos_ActivateBuffer(" . i . ")<CR>"
    endfor
    exe "map <C-[>0 :call TabPos_ActivateBuffer(10)<CR>"
endfunction

autocmd VimEnter * call TabPos_Initialize()
